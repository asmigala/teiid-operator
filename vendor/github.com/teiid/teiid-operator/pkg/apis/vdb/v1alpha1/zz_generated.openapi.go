// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Condition":                  schema_pkg_apis_vdb_v1alpha1_Condition(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Deployments":                schema_pkg_apis_vdb_v1alpha1_Deployments(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.GitSource":                  schema_pkg_apis_vdb_v1alpha1_GitSource(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Image":                      schema_pkg_apis_vdb_v1alpha1_Image(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.ImageSpec":                  schema_pkg_apis_vdb_v1alpha1_ImageSpec(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabase":            schema_pkg_apis_vdb_v1alpha1_VirtualDatabase(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseBuildObject": schema_pkg_apis_vdb_v1alpha1_VirtualDatabaseBuildObject(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseSpec":        schema_pkg_apis_vdb_v1alpha1_VirtualDatabaseSpec(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseStatus":      schema_pkg_apis_vdb_v1alpha1_VirtualDatabaseStatus(ref),
		"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.WebhookSecret":              schema_pkg_apis_vdb_v1alpha1_WebhookSecret(ref),
	}
}

func schema_pkg_apis_vdb_v1alpha1_Condition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition - The condition for the teiid-operator",
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_vdb_v1alpha1_Deployments(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Deployments ...",
				Properties: map[string]spec.Schema{
					"ready": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployments are ready to serve requests",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"starting": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployments are starting, may or may not succeed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"stopped": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployments are not starting, unclear what next step will be",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"failed": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployments failed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_vdb_v1alpha1_GitSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitSource Git coordinates to locate the source code to build",
				Properties: map[string]spec.Schema{
					"uri": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reference": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"contextDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_vdb_v1alpha1_Image(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Image - image details",
				Properties: map[string]spec.Schema{
					"imageStreamName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageStreamTag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageStreamNamespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageRegistry": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageRepo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"builderImage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_vdb_v1alpha1_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseStatus defines the observed state of VirtualDatabase",
				Properties: map[string]spec.Schema{
					"baseImage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"diskSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"memorySize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_vdb_v1alpha1_VirtualDatabase(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabase is the Schema for the virtualdatabases API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseSpec", "github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_vdb_v1alpha1_VirtualDatabaseBuildObject(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseBuildObject Data to define how to build an application from source",
				Properties: map[string]spec.Schema{
					"incremental": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"gitSource": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.GitSource"),
						},
					},
					"webhooks": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.WebhookSecret"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.GitSource", "github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.WebhookSecret", "k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_apis_vdb_v1alpha1_VirtualDatabaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseSpec defines the desired state of VirtualDatabase",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.ImageSpec"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"content": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dependencies": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"runtime": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseBuildObject"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.ImageSpec", "github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.VirtualDatabaseBuildObject", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_vdb_v1alpha1_VirtualDatabaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseStatus defines the observed state of VirtualDatabase",
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"digest": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"failure": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"runtimeVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"route": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"deployments": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Deployments"),
						},
					},
				},
				Required: []string{"conditions", "deployments"},
			},
		},
		Dependencies: []string{
			"github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Condition", "github.com/teiid/teiid-operator/pkg/apis/vdb/v1alpha1.Deployments"},
	}
}

func schema_pkg_apis_vdb_v1alpha1_WebhookSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebhookSecret Secret to use for a given webhook",
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}
